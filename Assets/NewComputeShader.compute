#pragma kernel CSMain
#include "noiseSimplex.cginc"

struct MeshProperties {
    float4x4 mat;
    float4 color;
    float3 tuv : TEXCOORD0;
};

RWStructuredBuffer<MeshProperties> _Properties;
float3 _PusherPosition;

// We used to just be able to use (1, 1, 1) threads for whatever population (not sure the old limit), but a Unity update
// imposed a thread limit of 65535.  Now, to populations above that, we need to be more granular with our threads.
[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float4x4 mat = _Properties[id.x].mat;
    // In a transform matrix, the position (translation) vector is the last column.
    float3 position = float3(mat[0][3], mat[1][3], mat[2][3]);

    // Get the vector from the pusher to the position, and scale it.
    float3 push = position - _PusherPosition;
    // Create a new translation matrix which represents a move in a direction.

    float3 th = float3(snoise(push/2)/1.5, 0, snoise(push/2)/1.5);

    float4x4 translation = float4x4(
        1, th.x, 0, position.x,
        0, 1, 0, position.y,
        0, th.y, 1, position.z,
        0, th.z, 0, 1
    );
    // Apply translation to existing matrix, which will be read in the shader.
    _Properties[id.x].mat = translation;
    }